// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compaction.proto

package compaction

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/pingcap/kvproto/pkg/coprocessor"

	_ "github.com/pingcap/kvproto/pkg/metapb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JobStatus int32

const (
	JobStatus_Running       JobStatus = 0
	JobStatus_FallbackLocal JobStatus = 1
	JobStatus_Finished      JobStatus = 2
	JobStatus_Fail          JobStatus = 3
)

var JobStatus_name = map[int32]string{
	0: "Running",
	1: "FallbackLocal",
	2: "Finished",
	3: "Fail",
}
var JobStatus_value = map[string]int32{
	"Running":       0,
	"FallbackLocal": 1,
	"Finished":      2,
	"Fail":          3,
}

func (x JobStatus) String() string {
	return proto.EnumName(JobStatus_name, int32(x))
}
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_compaction_c1d16a2092ecccd3, []int{0}
}

// Dipsatch the task request to compact server..
type StartCompactRequest struct {
	DbId                 string   `protobuf:"bytes,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	DbSessionId          string   `protobuf:"bytes,2,opt,name=db_session_id,json=dbSessionId,proto3" json:"db_session_id,omitempty"`
	StoreId              int64    `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	JobId                int64    `protobuf:"varint,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Address              string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Input                []byte   `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartCompactRequest) Reset()         { *m = StartCompactRequest{} }
func (m *StartCompactRequest) String() string { return proto.CompactTextString(m) }
func (*StartCompactRequest) ProtoMessage()    {}
func (*StartCompactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_compaction_c1d16a2092ecccd3, []int{0}
}
func (m *StartCompactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartCompactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartCompactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartCompactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartCompactRequest.Merge(dst, src)
}
func (m *StartCompactRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartCompactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartCompactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartCompactRequest proto.InternalMessageInfo

func (m *StartCompactRequest) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *StartCompactRequest) GetDbSessionId() string {
	if m != nil {
		return m.DbSessionId
	}
	return ""
}

func (m *StartCompactRequest) GetStoreId() int64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *StartCompactRequest) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *StartCompactRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StartCompactRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type Error struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_compaction_c1d16a2092ecccd3, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type StartCompactResponse struct {
	Status               JobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=compaction.JobStatus" json:"status,omitempty"`
	Error                *Error    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StartCompactResponse) Reset()         { *m = StartCompactResponse{} }
func (m *StartCompactResponse) String() string { return proto.CompactTextString(m) }
func (*StartCompactResponse) ProtoMessage()    {}
func (*StartCompactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_compaction_c1d16a2092ecccd3, []int{2}
}
func (m *StartCompactResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartCompactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartCompactResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartCompactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartCompactResponse.Merge(dst, src)
}
func (m *StartCompactResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartCompactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartCompactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartCompactResponse proto.InternalMessageInfo

func (m *StartCompactResponse) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_Running
}

func (m *StartCompactResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type QueryCompactionRequest struct {
	DbId                 string   `protobuf:"bytes,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	DbSessionId          string   `protobuf:"bytes,2,opt,name=db_session_id,json=dbSessionId,proto3" json:"db_session_id,omitempty"`
	StoreId              int64    `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	JobId                int64    `protobuf:"varint,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Address              string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCompactionRequest) Reset()         { *m = QueryCompactionRequest{} }
func (m *QueryCompactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCompactionRequest) ProtoMessage()    {}
func (*QueryCompactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_compaction_c1d16a2092ecccd3, []int{3}
}
func (m *QueryCompactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCompactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCompactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryCompactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCompactionRequest.Merge(dst, src)
}
func (m *QueryCompactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCompactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCompactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCompactionRequest proto.InternalMessageInfo

func (m *QueryCompactionRequest) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *QueryCompactionRequest) GetDbSessionId() string {
	if m != nil {
		return m.DbSessionId
	}
	return ""
}

func (m *QueryCompactionRequest) GetStoreId() int64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *QueryCompactionRequest) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *QueryCompactionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryCompactionResponse struct {
	Status               JobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=compaction.JobStatus" json:"status,omitempty"`
	Error                *Error    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Output               []byte    `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QueryCompactionResponse) Reset()         { *m = QueryCompactionResponse{} }
func (m *QueryCompactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCompactionResponse) ProtoMessage()    {}
func (*QueryCompactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_compaction_c1d16a2092ecccd3, []int{4}
}
func (m *QueryCompactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCompactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCompactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryCompactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCompactionResponse.Merge(dst, src)
}
func (m *QueryCompactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCompactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCompactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCompactionResponse proto.InternalMessageInfo

func (m *QueryCompactionResponse) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_Running
}

func (m *QueryCompactionResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryCompactionResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*StartCompactRequest)(nil), "compaction.StartCompactRequest")
	proto.RegisterType((*Error)(nil), "compaction.Error")
	proto.RegisterType((*StartCompactResponse)(nil), "compaction.StartCompactResponse")
	proto.RegisterType((*QueryCompactionRequest)(nil), "compaction.QueryCompactionRequest")
	proto.RegisterType((*QueryCompactionResponse)(nil), "compaction.QueryCompactionResponse")
	proto.RegisterEnum("compaction.JobStatus", JobStatus_name, JobStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CompactService service

type CompactServiceClient interface {
	StartCompact(ctx context.Context, in *StartCompactRequest, opts ...grpc.CallOption) (*StartCompactResponse, error)
	QueryCompactionStatus(ctx context.Context, in *QueryCompactionRequest, opts ...grpc.CallOption) (*QueryCompactionResponse, error)
}

type compactServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompactServiceClient(cc *grpc.ClientConn) CompactServiceClient {
	return &compactServiceClient{cc}
}

func (c *compactServiceClient) StartCompact(ctx context.Context, in *StartCompactRequest, opts ...grpc.CallOption) (*StartCompactResponse, error) {
	out := new(StartCompactResponse)
	err := c.cc.Invoke(ctx, "/compaction.CompactService/StartCompact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compactServiceClient) QueryCompactionStatus(ctx context.Context, in *QueryCompactionRequest, opts ...grpc.CallOption) (*QueryCompactionResponse, error) {
	out := new(QueryCompactionResponse)
	err := c.cc.Invoke(ctx, "/compaction.CompactService/QueryCompactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompactService service

type CompactServiceServer interface {
	StartCompact(context.Context, *StartCompactRequest) (*StartCompactResponse, error)
	QueryCompactionStatus(context.Context, *QueryCompactionRequest) (*QueryCompactionResponse, error)
}

func RegisterCompactServiceServer(s *grpc.Server, srv CompactServiceServer) {
	s.RegisterService(&_CompactService_serviceDesc, srv)
}

func _CompactService_StartCompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCompactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactServiceServer).StartCompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compaction.CompactService/StartCompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactServiceServer).StartCompact(ctx, req.(*StartCompactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompactService_QueryCompactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactServiceServer).QueryCompactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compaction.CompactService/QueryCompactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactServiceServer).QueryCompactionStatus(ctx, req.(*QueryCompactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompactService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compaction.CompactService",
	HandlerType: (*CompactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCompact",
			Handler:    _CompactService_StartCompact_Handler,
		},
		{
			MethodName: "QueryCompactionStatus",
			Handler:    _CompactService_QueryCompactionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compaction.proto",
}

func (m *StartCompactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartCompactRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.DbId)))
		i += copy(dAtA[i:], m.DbId)
	}
	if len(m.DbSessionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.DbSessionId)))
		i += copy(dAtA[i:], m.DbSessionId)
	}
	if m.StoreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.StoreId))
	}
	if m.JobId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.JobId))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Input) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.Input)))
		i += copy(dAtA[i:], m.Input)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartCompactResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartCompactResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.Status))
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryCompactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCompactionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.DbId)))
		i += copy(dAtA[i:], m.DbId)
	}
	if len(m.DbSessionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.DbSessionId)))
		i += copy(dAtA[i:], m.DbSessionId)
	}
	if m.StoreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.StoreId))
	}
	if m.JobId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.JobId))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryCompactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCompactionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.Status))
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Output) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompaction(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCompaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StartCompactRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbId)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	l = len(m.DbSessionId)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.StoreId != 0 {
		n += 1 + sovCompaction(uint64(m.StoreId))
	}
	if m.JobId != 0 {
		n += 1 + sovCompaction(uint64(m.JobId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCompaction(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartCompactResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCompaction(uint64(m.Status))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryCompactionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbId)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	l = len(m.DbSessionId)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.StoreId != 0 {
		n += 1 + sovCompaction(uint64(m.StoreId))
	}
	if m.JobId != 0 {
		n += 1 + sovCompaction(uint64(m.JobId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryCompactionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCompaction(uint64(m.Status))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCompaction(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovCompaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCompaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompaction(x uint64) (n int) {
	return sovCompaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartCompactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartCompactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartCompactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbSessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbSessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			m.JobId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartCompactResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartCompactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartCompactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (JobStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCompactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCompactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCompactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbSessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbSessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			m.JobId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCompactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCompactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCompactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (JobStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompaction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("compaction.proto", fileDescriptor_compaction_c1d16a2092ecccd3) }

var fileDescriptor_compaction_c1d16a2092ecccd3 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0xed, 0xd4, 0xb1, 0x93, 0xfe, 0xa4, 0x95, 0xf3, 0x9b, 0x94, 0x90, 0x45, 0x88, 0xcc, 0x82,
	0x08, 0xa9, 0x41, 0x0a, 0x37, 0x20, 0x22, 0x52, 0x10, 0x1b, 0xec, 0x03, 0x54, 0xb6, 0x67, 0x64,
	0xa6, 0x49, 0x66, 0xcc, 0xcc, 0x38, 0x12, 0x47, 0xe0, 0x06, 0x6c, 0xb8, 0x03, 0xc7, 0x80, 0x1d,
	0x47, 0x40, 0xe1, 0x22, 0xc8, 0x63, 0xb7, 0x18, 0x28, 0xec, 0x90, 0x58, 0xe5, 0xff, 0xff, 0xde,
	0xbc, 0x79, 0xf3, 0x7e, 0x0c, 0x7e, 0x2a, 0x77, 0x79, 0x9c, 0x1a, 0x2e, 0xc5, 0x3c, 0x57, 0xd2,
	0x48, 0x84, 0x1f, 0x93, 0xf1, 0x20, 0x93, 0x99, 0xb4, 0xe3, 0x27, 0x65, 0x55, 0x31, 0xc6, 0xfd,
	0xb4, 0x9c, 0xa5, 0x4c, 0x6b, 0xa9, 0xea, 0x51, 0x6f, 0xc7, 0x4c, 0x9c, 0x27, 0x55, 0x17, 0x7c,
	0x24, 0x70, 0x1e, 0x99, 0x58, 0x99, 0x65, 0x25, 0x15, 0xb2, 0x37, 0x05, 0xd3, 0x06, 0xcf, 0xc1,
	0xa5, 0xc9, 0x15, 0xa7, 0x23, 0x32, 0x25, 0xb3, 0x93, 0xb0, 0x45, 0x93, 0x35, 0xc5, 0x00, 0x4e,
	0x69, 0x72, 0xa5, 0x99, 0xd6, 0x5c, 0x8a, 0x12, 0x3c, 0xb6, 0x60, 0x97, 0x26, 0x51, 0x35, 0x5b,
	0x53, 0xbc, 0x0f, 0x1d, 0x6d, 0xa4, 0x62, 0x25, 0xec, 0x4c, 0xc9, 0xcc, 0x09, 0xdb, 0xb6, 0x5f,
	0x53, 0x1c, 0x82, 0x77, 0x2d, 0xad, 0x68, 0xcb, 0x02, 0xee, 0xb5, 0x2c, 0x55, 0x47, 0xd0, 0x8e,
	0x29, 0x55, 0x4c, 0xeb, 0x91, 0x6b, 0xf5, 0x6e, 0x5a, 0x1c, 0x80, 0xcb, 0x45, 0x5e, 0x98, 0x91,
	0x37, 0x25, 0xb3, 0x5e, 0x58, 0x35, 0xc1, 0x25, 0xb8, 0xcf, 0x95, 0x92, 0x0a, 0x11, 0x5a, 0xa9,
	0xa4, 0xcc, 0x5a, 0x74, 0x43, 0x5b, 0xa3, 0x0f, 0xce, 0x4e, 0x67, 0xb5, 0xb1, 0xb2, 0x0c, 0x04,
	0x0c, 0x7e, 0x7e, 0xa0, 0xce, 0xa5, 0xd0, 0x0c, 0x2f, 0xc1, 0xd3, 0x26, 0x36, 0x85, 0xb6, 0xe7,
	0xcf, 0x16, 0xc3, 0x79, 0x23, 0xdf, 0x17, 0x32, 0x89, 0x2c, 0x18, 0xd6, 0x24, 0x7c, 0x04, 0x2e,
	0x2b, 0x6f, 0xb5, 0xd2, 0xdd, 0x45, 0xbf, 0xc9, 0xb6, 0x76, 0xc2, 0x0a, 0x0f, 0x3e, 0x10, 0xb8,
	0x78, 0x55, 0x30, 0xf5, 0x76, 0x79, 0x4b, 0xf8, 0x9f, 0x42, 0x0d, 0xde, 0x11, 0xb8, 0xf7, 0x9b,
	0xbf, 0x7f, 0x9b, 0x09, 0x5e, 0x80, 0x27, 0x0b, 0x53, 0x6e, 0xd2, 0xb1, 0x9b, 0xac, 0xbb, 0xc7,
	0x4b, 0x38, 0xb9, 0x55, 0xc5, 0x2e, 0xb4, 0xc3, 0x42, 0x08, 0x2e, 0x32, 0xff, 0x08, 0xfb, 0x70,
	0xba, 0x8a, 0xb7, 0xdb, 0x24, 0x4e, 0x37, 0x2f, 0x65, 0x1a, 0x6f, 0x7d, 0x82, 0x3d, 0xe8, 0xac,
	0xb8, 0xe0, 0xfa, 0x35, 0xa3, 0xfe, 0x31, 0x76, 0xa0, 0xb5, 0x8a, 0xf9, 0xd6, 0x77, 0x16, 0x9f,
	0x09, 0x9c, 0xd5, 0x6f, 0x89, 0x98, 0xda, 0xf3, 0x94, 0x61, 0x04, 0xbd, 0xe6, 0xce, 0xf1, 0x41,
	0xd3, 0xd9, 0x1d, 0x7f, 0xf7, 0xf1, 0xf4, 0xcf, 0x84, 0x2a, 0x9a, 0xe0, 0x08, 0x13, 0x18, 0xfe,
	0x92, 0x5b, 0x6d, 0x3c, 0x68, 0x1e, 0xbe, 0x7b, 0xf5, 0xe3, 0x87, 0x7f, 0xe5, 0xdc, 0xdc, 0xf1,
	0x2c, 0xf8, 0x74, 0x98, 0x90, 0x2f, 0x87, 0x09, 0xf9, 0x7a, 0x98, 0x90, 0xf7, 0xdf, 0x26, 0x47,
	0xe0, 0x4b, 0x95, 0xcd, 0x0d, 0xdf, 0xec, 0xe7, 0x9b, 0xbd, 0xfd, 0x64, 0x13, 0xcf, 0xfe, 0x3c,
	0xfd, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x6c, 0x40, 0x23, 0x10, 0x04, 0x00, 0x00,
}
