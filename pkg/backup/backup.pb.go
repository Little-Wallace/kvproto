// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: backup.proto

package backup

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	eraftpb "github.com/pingcap/kvproto/pkg/eraftpb"

	errorpb "github.com/pingcap/kvproto/pkg/errorpb"

	kvrpcpb "github.com/pingcap/kvproto/pkg/kvrpcpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BackupEvent_Event int32

const (
	BackupEvent_Unknown       BackupEvent_Event = 0
	BackupEvent_Snapshot      BackupEvent_Event = 1
	BackupEvent_Split         BackupEvent_Event = 2
	BackupEvent_PrepareMerge  BackupEvent_Event = 3
	BackupEvent_CommitMerge   BackupEvent_Event = 4
	BackupEvent_RollbackMerge BackupEvent_Event = 5
)

var BackupEvent_Event_name = map[int32]string{
	0: "Unknown",
	1: "Snapshot",
	2: "Split",
	3: "PrepareMerge",
	4: "CommitMerge",
	5: "RollbackMerge",
}
var BackupEvent_Event_value = map[string]int32{
	"Unknown":       0,
	"Snapshot":      1,
	"Split":         2,
	"PrepareMerge":  3,
	"CommitMerge":   4,
	"RollbackMerge": 5,
}

func (x BackupEvent_Event) String() string {
	return proto.EnumName(BackupEvent_Event_name, int32(x))
}
func (BackupEvent_Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{1, 0}
}

type EntryBatch struct {
	Entries              []*eraftpb.Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EntryBatch) Reset()         { *m = EntryBatch{} }
func (m *EntryBatch) String() string { return proto.CompactTextString(m) }
func (*EntryBatch) ProtoMessage()    {}
func (*EntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{0}
}
func (m *EntryBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBatch.Merge(dst, src)
}
func (m *EntryBatch) XXX_Size() int {
	return m.Size()
}
func (m *EntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBatch proto.InternalMessageInfo

func (m *EntryBatch) GetEntries() []*eraftpb.Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type BackupEvent struct {
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Raft log index.
	Index                uint64            `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	RelatedRegionIds     []uint64          `protobuf:"varint,3,rep,packed,name=related_region_ids,json=relatedRegionIds" json:"related_region_ids,omitempty"`
	Event                BackupEvent_Event `protobuf:"varint,4,opt,name=event,proto3,enum=backup.BackupEvent_Event" json:"event,omitempty"`
	Dependency           uint64            `protobuf:"varint,5,opt,name=dependency,proto3" json:"dependency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BackupEvent) Reset()         { *m = BackupEvent{} }
func (m *BackupEvent) String() string { return proto.CompactTextString(m) }
func (*BackupEvent) ProtoMessage()    {}
func (*BackupEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{1}
}
func (m *BackupEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BackupEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupEvent.Merge(dst, src)
}
func (m *BackupEvent) XXX_Size() int {
	return m.Size()
}
func (m *BackupEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BackupEvent proto.InternalMessageInfo

func (m *BackupEvent) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *BackupEvent) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BackupEvent) GetRelatedRegionIds() []uint64 {
	if m != nil {
		return m.RelatedRegionIds
	}
	return nil
}

func (m *BackupEvent) GetEvent() BackupEvent_Event {
	if m != nil {
		return m.Event
	}
	return BackupEvent_Unknown
}

func (m *BackupEvent) GetDependency() uint64 {
	if m != nil {
		return m.Dependency
	}
	return 0
}

type BackupMeta struct {
	Events                     []*BackupEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	StartFullBackupDependency  uint64         `protobuf:"varint,2,opt,name=start_full_backup_dependency,json=startFullBackupDependency,proto3" json:"start_full_backup_dependency,omitempty"`
	FinishFullBackupDependency uint64         `protobuf:"varint,3,opt,name=finish_full_backup_dependency,json=finishFullBackupDependency,proto3" json:"finish_full_backup_dependency,omitempty"`
	IncBackupDependencies      []uint64       `protobuf:"varint,4,rep,packed,name=inc_backup_dependencies,json=incBackupDependencies" json:"inc_backup_dependencies,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}       `json:"-"`
	XXX_unrecognized           []byte         `json:"-"`
	XXX_sizecache              int32          `json:"-"`
}

func (m *BackupMeta) Reset()         { *m = BackupMeta{} }
func (m *BackupMeta) String() string { return proto.CompactTextString(m) }
func (*BackupMeta) ProtoMessage()    {}
func (*BackupMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{2}
}
func (m *BackupMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BackupMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupMeta.Merge(dst, src)
}
func (m *BackupMeta) XXX_Size() int {
	return m.Size()
}
func (m *BackupMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BackupMeta proto.InternalMessageInfo

func (m *BackupMeta) GetEvents() []*BackupEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *BackupMeta) GetStartFullBackupDependency() uint64 {
	if m != nil {
		return m.StartFullBackupDependency
	}
	return 0
}

func (m *BackupMeta) GetFinishFullBackupDependency() uint64 {
	if m != nil {
		return m.FinishFullBackupDependency
	}
	return 0
}

func (m *BackupMeta) GetIncBackupDependencies() []uint64 {
	if m != nil {
		return m.IncBackupDependencies
	}
	return nil
}

type BackupRegionRequest struct {
	Context              *kvrpcpb.Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BackupRegionRequest) Reset()         { *m = BackupRegionRequest{} }
func (m *BackupRegionRequest) String() string { return proto.CompactTextString(m) }
func (*BackupRegionRequest) ProtoMessage()    {}
func (*BackupRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{3}
}
func (m *BackupRegionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupRegionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BackupRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupRegionRequest.Merge(dst, src)
}
func (m *BackupRegionRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupRegionRequest proto.InternalMessageInfo

func (m *BackupRegionRequest) GetContext() *kvrpcpb.Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type BackupRegionResponse struct {
	RegionError          *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError" json:"region_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BackupRegionResponse) Reset()         { *m = BackupRegionResponse{} }
func (m *BackupRegionResponse) String() string { return proto.CompactTextString(m) }
func (*BackupRegionResponse) ProtoMessage()    {}
func (*BackupRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{4}
}
func (m *BackupRegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupRegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BackupRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupRegionResponse.Merge(dst, src)
}
func (m *BackupRegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupRegionResponse proto.InternalMessageInfo

func (m *BackupRegionResponse) GetRegionError() *errorpb.Error {
	if m != nil {
		return m.RegionError
	}
	return nil
}

type StartFullBackupRequest struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartFullBackupRequest) Reset()         { *m = StartFullBackupRequest{} }
func (m *StartFullBackupRequest) String() string { return proto.CompactTextString(m) }
func (*StartFullBackupRequest) ProtoMessage()    {}
func (*StartFullBackupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{5}
}
func (m *StartFullBackupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartFullBackupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartFullBackupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartFullBackupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartFullBackupRequest.Merge(dst, src)
}
func (m *StartFullBackupRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartFullBackupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartFullBackupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartFullBackupRequest proto.InternalMessageInfo

func (m *StartFullBackupRequest) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

type StartFullBackupResponse struct {
	StartDependency      uint64   `protobuf:"varint,1,opt,name=start_dependency,json=startDependency,proto3" json:"start_dependency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartFullBackupResponse) Reset()         { *m = StartFullBackupResponse{} }
func (m *StartFullBackupResponse) String() string { return proto.CompactTextString(m) }
func (*StartFullBackupResponse) ProtoMessage()    {}
func (*StartFullBackupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{6}
}
func (m *StartFullBackupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartFullBackupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartFullBackupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartFullBackupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartFullBackupResponse.Merge(dst, src)
}
func (m *StartFullBackupResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartFullBackupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartFullBackupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartFullBackupResponse proto.InternalMessageInfo

func (m *StartFullBackupResponse) GetStartDependency() uint64 {
	if m != nil {
		return m.StartDependency
	}
	return 0
}

type FinishFullBackupRequest struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishFullBackupRequest) Reset()         { *m = FinishFullBackupRequest{} }
func (m *FinishFullBackupRequest) String() string { return proto.CompactTextString(m) }
func (*FinishFullBackupRequest) ProtoMessage()    {}
func (*FinishFullBackupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{7}
}
func (m *FinishFullBackupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishFullBackupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishFullBackupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FinishFullBackupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishFullBackupRequest.Merge(dst, src)
}
func (m *FinishFullBackupRequest) XXX_Size() int {
	return m.Size()
}
func (m *FinishFullBackupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishFullBackupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinishFullBackupRequest proto.InternalMessageInfo

func (m *FinishFullBackupRequest) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

type FinishFullBackupResponse struct {
	FinishDependency     uint64   `protobuf:"varint,1,opt,name=finish_dependency,json=finishDependency,proto3" json:"finish_dependency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishFullBackupResponse) Reset()         { *m = FinishFullBackupResponse{} }
func (m *FinishFullBackupResponse) String() string { return proto.CompactTextString(m) }
func (*FinishFullBackupResponse) ProtoMessage()    {}
func (*FinishFullBackupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_backup_0b73f309888fb835, []int{8}
}
func (m *FinishFullBackupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishFullBackupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishFullBackupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FinishFullBackupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishFullBackupResponse.Merge(dst, src)
}
func (m *FinishFullBackupResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinishFullBackupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishFullBackupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinishFullBackupResponse proto.InternalMessageInfo

func (m *FinishFullBackupResponse) GetFinishDependency() uint64 {
	if m != nil {
		return m.FinishDependency
	}
	return 0
}

func init() {
	proto.RegisterType((*EntryBatch)(nil), "backup.EntryBatch")
	proto.RegisterType((*BackupEvent)(nil), "backup.BackupEvent")
	proto.RegisterType((*BackupMeta)(nil), "backup.BackupMeta")
	proto.RegisterType((*BackupRegionRequest)(nil), "backup.BackupRegionRequest")
	proto.RegisterType((*BackupRegionResponse)(nil), "backup.BackupRegionResponse")
	proto.RegisterType((*StartFullBackupRequest)(nil), "backup.StartFullBackupRequest")
	proto.RegisterType((*StartFullBackupResponse)(nil), "backup.StartFullBackupResponse")
	proto.RegisterType((*FinishFullBackupRequest)(nil), "backup.FinishFullBackupRequest")
	proto.RegisterType((*FinishFullBackupResponse)(nil), "backup.FinishFullBackupResponse")
	proto.RegisterEnum("backup.BackupEvent_Event", BackupEvent_Event_name, BackupEvent_Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Backup service

type BackupClient interface {
	StartFullBackup(ctx context.Context, in *StartFullBackupRequest, opts ...grpc.CallOption) (*StartFullBackupResponse, error)
	BackupRegion(ctx context.Context, in *BackupRegionRequest, opts ...grpc.CallOption) (*BackupRegionResponse, error)
	FinishFullBackup(ctx context.Context, in *FinishFullBackupRequest, opts ...grpc.CallOption) (*FinishFullBackupResponse, error)
}

type backupClient struct {
	cc *grpc.ClientConn
}

func NewBackupClient(cc *grpc.ClientConn) BackupClient {
	return &backupClient{cc}
}

func (c *backupClient) StartFullBackup(ctx context.Context, in *StartFullBackupRequest, opts ...grpc.CallOption) (*StartFullBackupResponse, error) {
	out := new(StartFullBackupResponse)
	err := c.cc.Invoke(ctx, "/backup.Backup/start_full_backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) BackupRegion(ctx context.Context, in *BackupRegionRequest, opts ...grpc.CallOption) (*BackupRegionResponse, error) {
	out := new(BackupRegionResponse)
	err := c.cc.Invoke(ctx, "/backup.Backup/backup_region", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) FinishFullBackup(ctx context.Context, in *FinishFullBackupRequest, opts ...grpc.CallOption) (*FinishFullBackupResponse, error) {
	out := new(FinishFullBackupResponse)
	err := c.cc.Invoke(ctx, "/backup.Backup/finish_full_backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backup service

type BackupServer interface {
	StartFullBackup(context.Context, *StartFullBackupRequest) (*StartFullBackupResponse, error)
	BackupRegion(context.Context, *BackupRegionRequest) (*BackupRegionResponse, error)
	FinishFullBackup(context.Context, *FinishFullBackupRequest) (*FinishFullBackupResponse, error)
}

func RegisterBackupServer(s *grpc.Server, srv BackupServer) {
	s.RegisterService(&_Backup_serviceDesc, srv)
}

func _Backup_StartFullBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFullBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).StartFullBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backup.Backup/StartFullBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).StartFullBackup(ctx, req.(*StartFullBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_BackupRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).BackupRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backup.Backup/BackupRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).BackupRegion(ctx, req.(*BackupRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_FinishFullBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishFullBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).FinishFullBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backup.Backup/FinishFullBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).FinishFullBackup(ctx, req.(*FinishFullBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backup.Backup",
	HandlerType: (*BackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start_full_backup",
			Handler:    _Backup_StartFullBackup_Handler,
		},
		{
			MethodName: "backup_region",
			Handler:    _Backup_BackupRegion_Handler,
		},
		{
			MethodName: "finish_full_backup",
			Handler:    _Backup_FinishFullBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backup.proto",
}

func (m *EntryBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBackup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackupEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.RegionId))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.Index))
	}
	if len(m.RelatedRegionIds) > 0 {
		dAtA2 := make([]byte, len(m.RelatedRegionIds)*10)
		var j1 int
		for _, num := range m.RelatedRegionIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBackup(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Event != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.Event))
	}
	if m.Dependency != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.Dependency))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackupMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBackup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StartFullBackupDependency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.StartFullBackupDependency))
	}
	if m.FinishFullBackupDependency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.FinishFullBackupDependency))
	}
	if len(m.IncBackupDependencies) > 0 {
		dAtA4 := make([]byte, len(m.IncBackupDependencies)*10)
		var j3 int
		for _, num := range m.IncBackupDependencies {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintBackup(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackupRegionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupRegionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.Context.Size()))
		n5, err := m.Context.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackupRegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupRegionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionError != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.RegionError.Size()))
		n6, err := m.RegionError.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartFullBackupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartFullBackupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartFullBackupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartFullBackupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartDependency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.StartDependency))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FinishFullBackupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishFullBackupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FinishFullBackupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishFullBackupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FinishDependency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackup(dAtA, i, uint64(m.FinishDependency))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBackup(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EntryBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackupEvent) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovBackup(uint64(m.RegionId))
	}
	if m.Index != 0 {
		n += 1 + sovBackup(uint64(m.Index))
	}
	if len(m.RelatedRegionIds) > 0 {
		l = 0
		for _, e := range m.RelatedRegionIds {
			l += sovBackup(uint64(e))
		}
		n += 1 + sovBackup(uint64(l)) + l
	}
	if m.Event != 0 {
		n += 1 + sovBackup(uint64(m.Event))
	}
	if m.Dependency != 0 {
		n += 1 + sovBackup(uint64(m.Dependency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackupMeta) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if m.StartFullBackupDependency != 0 {
		n += 1 + sovBackup(uint64(m.StartFullBackupDependency))
	}
	if m.FinishFullBackupDependency != 0 {
		n += 1 + sovBackup(uint64(m.FinishFullBackupDependency))
	}
	if len(m.IncBackupDependencies) > 0 {
		l = 0
		for _, e := range m.IncBackupDependencies {
			l += sovBackup(uint64(e))
		}
		n += 1 + sovBackup(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackupRegionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovBackup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackupRegionResponse) Size() (n int) {
	var l int
	_ = l
	if m.RegionError != nil {
		l = m.RegionError.Size()
		n += 1 + l + sovBackup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartFullBackupRequest) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovBackup(uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartFullBackupResponse) Size() (n int) {
	var l int
	_ = l
	if m.StartDependency != 0 {
		n += 1 + sovBackup(uint64(m.StartDependency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FinishFullBackupRequest) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovBackup(uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FinishFullBackupResponse) Size() (n int) {
	var l int
	_ = l
	if m.FinishDependency != 0 {
		n += 1 + sovBackup(uint64(m.FinishDependency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBackup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBackup(x uint64) (n int) {
	return sovBackup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &eraftpb.Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RelatedRegionIds = append(m.RelatedRegionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBackup
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RelatedRegionIds = append(m.RelatedRegionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedRegionIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (BackupEvent_Event(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependency", wireType)
			}
			m.Dependency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dependency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &BackupEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFullBackupDependency", wireType)
			}
			m.StartFullBackupDependency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFullBackupDependency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishFullBackupDependency", wireType)
			}
			m.FinishFullBackupDependency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishFullBackupDependency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IncBackupDependencies = append(m.IncBackupDependencies, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBackup
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IncBackupDependencies = append(m.IncBackupDependencies, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IncBackupDependencies", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupRegionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupRegionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupRegionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &kvrpcpb.Context{}
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupRegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionError == nil {
				m.RegionError = &errorpb.Error{}
			}
			if err := m.RegionError.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartFullBackupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartFullBackupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartFullBackupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartFullBackupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartFullBackupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartFullBackupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDependency", wireType)
			}
			m.StartDependency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDependency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishFullBackupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishFullBackupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishFullBackupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishFullBackupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishFullBackupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishFullBackupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishDependency", wireType)
			}
			m.FinishDependency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishDependency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBackup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBackup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBackup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBackup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBackup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("backup.proto", fileDescriptor_backup_0b73f309888fb835) }

var fileDescriptor_backup_0b73f309888fb835 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xad, 0xf3, 0x6a, 0x7b, 0x93, 0xb4, 0xee, 0xb4, 0x50, 0x37, 0x6d, 0x43, 0xe4, 0x05, 0x0a,
	0x14, 0xb9, 0x22, 0x48, 0x85, 0x1d, 0xea, 0x13, 0x55, 0xa2, 0x12, 0x72, 0x05, 0x12, 0xab, 0xc8,
	0xb5, 0xa7, 0xa9, 0x15, 0x77, 0xc6, 0x8c, 0x27, 0xa1, 0xfd, 0x04, 0xfe, 0x80, 0x0f, 0x60, 0xc1,
	0xa7, 0xb0, 0x64, 0xc9, 0x12, 0x95, 0x6f, 0x60, 0x8f, 0x3c, 0x77, 0x9c, 0x47, 0x93, 0x48, 0x6c,
	0xe2, 0x99, 0x73, 0xef, 0x3d, 0x73, 0x7c, 0xe6, 0xc4, 0x50, 0xb9, 0xf0, 0xfc, 0x6e, 0x2f, 0x76,
	0x62, 0xc1, 0x25, 0x27, 0x25, 0xdc, 0xd5, 0xaa, 0xdd, 0xbe, 0x88, 0xfd, 0xf8, 0x02, 0xe1, 0x5a,
	0x95, 0x0a, 0xc1, 0xc5, 0xe8, 0xd6, 0xbb, 0x94, 0x83, 0xed, 0x5a, 0x87, 0x77, 0xb8, 0x5a, 0xee,
	0xa6, 0x2b, 0x8d, 0x2e, 0x8b, 0x5e, 0x22, 0xd5, 0x12, 0x01, 0x7b, 0x0f, 0xe0, 0x98, 0x49, 0x71,
	0x7b, 0xe0, 0x49, 0xff, 0x8a, 0x34, 0x61, 0x9e, 0x32, 0x29, 0x42, 0x9a, 0x58, 0x46, 0x23, 0xdf,
	0x2c, 0xb7, 0x96, 0x9c, 0x8c, 0x55, 0x75, 0xb9, 0x59, 0xd9, 0xfe, 0x96, 0x83, 0xf2, 0x81, 0x92,
	0x75, 0xdc, 0xa7, 0x4c, 0x92, 0x4d, 0x58, 0x14, 0xb4, 0x13, 0x72, 0xd6, 0x0e, 0x03, 0xcb, 0x68,
	0x18, 0xcd, 0x82, 0xbb, 0x80, 0xc0, 0x69, 0x40, 0xd6, 0xa0, 0x18, 0xb2, 0x80, 0xde, 0x58, 0x39,
	0x55, 0xc0, 0x0d, 0x79, 0x06, 0x44, 0xd0, 0xc8, 0x93, 0x34, 0x68, 0x0f, 0x46, 0x13, 0x2b, 0xdf,
	0xc8, 0x37, 0x0b, 0xae, 0xa9, 0x2b, 0xae, 0xa6, 0x48, 0xc8, 0x2e, 0x14, 0x69, 0x7a, 0x92, 0x55,
	0x68, 0x18, 0xcd, 0xa5, 0xd6, 0x86, 0xa3, 0x2d, 0x1a, 0x11, 0xe1, 0xa8, 0x5f, 0x17, 0xfb, 0x48,
	0x1d, 0x20, 0xa0, 0x31, 0x65, 0x01, 0x65, 0xfe, 0xad, 0x55, 0x54, 0x27, 0x8f, 0x20, 0xb6, 0x0f,
	0x45, 0x94, 0x5e, 0x86, 0xf9, 0xf7, 0xac, 0xcb, 0xf8, 0x67, 0x66, 0xce, 0x91, 0x0a, 0x2c, 0x9c,
	0x33, 0x2f, 0x4e, 0xae, 0xb8, 0x34, 0x0d, 0xb2, 0x08, 0xc5, 0xf3, 0x38, 0x0a, 0xa5, 0x99, 0x23,
	0x26, 0x54, 0xde, 0x09, 0x1a, 0x7b, 0x82, 0x9e, 0x51, 0xd1, 0xa1, 0x66, 0x9e, 0x2c, 0x43, 0xf9,
	0x90, 0x5f, 0x5f, 0x87, 0x12, 0x81, 0x02, 0x59, 0x81, 0xaa, 0xcb, 0xa3, 0x28, 0x15, 0x86, 0x50,
	0xd1, 0xfe, 0x6b, 0x00, 0xa0, 0xc2, 0x33, 0x2a, 0x3d, 0xb2, 0x03, 0x25, 0x25, 0x2e, 0xb3, 0x77,
	0x75, 0xca, 0x5b, 0xb8, 0xba, 0x85, 0xbc, 0x86, 0xad, 0x44, 0x7a, 0x42, 0xb6, 0x2f, 0x7b, 0x51,
	0xd4, 0xc6, 0xc6, 0xf6, 0xc8, 0x2b, 0xa1, 0x99, 0x1b, 0xaa, 0xe7, 0xa4, 0x17, 0x45, 0xc8, 0x71,
	0x34, 0x68, 0x20, 0xfb, 0xb0, 0x7d, 0x19, 0xb2, 0x30, 0xb9, 0x9a, 0xc5, 0x90, 0x57, 0x0c, 0x35,
	0x6c, 0x9a, 0x4a, 0xb1, 0x07, 0xeb, 0x21, 0xf3, 0x27, 0x46, 0xd3, 0x80, 0x14, 0xd4, 0x45, 0x3d,
	0x08, 0x99, 0x7f, 0x6f, 0x2a, 0x8d, 0xc7, 0x3e, 0xac, 0x22, 0x8a, 0x17, 0xe8, 0xd2, 0x4f, 0x3d,
	0x9a, 0x48, 0xf2, 0x14, 0xe6, 0x7d, 0xce, 0x24, 0xbd, 0x91, 0x2a, 0x23, 0xe5, 0x96, 0xe9, 0x64,
	0x99, 0x3e, 0x44, 0xdc, 0xcd, 0x1a, 0xec, 0x53, 0x58, 0x1b, 0xa7, 0x48, 0x62, 0xce, 0x12, 0x4a,
	0x9e, 0x43, 0x45, 0xc7, 0x45, 0xe5, 0x5f, 0x13, 0xa5, 0x41, 0xc5, 0x7f, 0xc3, 0x71, 0xfa, 0x74,
	0xcb, 0xd8, 0xa3, 0x36, 0xf6, 0x4b, 0x78, 0x78, 0x3e, 0xee, 0x52, 0x26, 0x68, 0x1b, 0xc0, 0x8f,
	0x7a, 0x89, 0xa4, 0x62, 0x98, 0xdb, 0x45, 0x8d, 0x9c, 0x06, 0xf6, 0x11, 0xac, 0x4f, 0x0c, 0x6a,
	0x19, 0x4f, 0xc0, 0xc4, 0xdb, 0x19, 0xf1, 0x13, 0xe7, 0x97, 0x15, 0x3e, 0x34, 0xd1, 0x7e, 0x05,
	0xeb, 0x27, 0xf7, 0x2c, 0xfe, 0xcf, 0xf3, 0xdf, 0x80, 0x35, 0x39, 0xa9, 0x05, 0xec, 0xc0, 0x8a,
	0xbe, 0xdd, 0x09, 0x05, 0x26, 0x16, 0x86, 0x12, 0x5a, 0x5f, 0x72, 0x50, 0xc2, 0x79, 0xf2, 0x01,
	0x56, 0x26, 0x62, 0x45, 0xea, 0x59, 0x10, 0xa7, 0xfb, 0x54, 0x7b, 0x34, 0xb3, 0x8e, 0x6a, 0xec,
	0x39, 0xf2, 0x16, 0xaa, 0x3a, 0x26, 0x68, 0x3d, 0xd9, 0x1c, 0x0f, 0xf7, 0x58, 0x12, 0x6a, 0x5b,
	0xd3, 0x8b, 0x03, 0xb6, 0x8f, 0x40, 0x26, 0xb3, 0x4b, 0x06, 0x32, 0x66, 0xf8, 0x59, 0x6b, 0xcc,
	0x6e, 0xc8, 0xa8, 0x0f, 0x1e, 0xff, 0xfa, 0xbe, 0x60, 0xfc, 0xb8, 0xab, 0x1b, 0x3f, 0xef, 0xea,
	0xc6, 0xef, 0xbb, 0xba, 0xf1, 0xf5, 0x4f, 0x7d, 0x0e, 0x4c, 0x2e, 0x3a, 0x8e, 0x0c, 0xbb, 0x7d,
	0xa7, 0xdb, 0x57, 0x9f, 0xc6, 0x8b, 0x92, 0x7a, 0xbc, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x71,
	0xaf, 0x8a, 0xd8, 0x8d, 0x05, 0x00, 0x00,
}
